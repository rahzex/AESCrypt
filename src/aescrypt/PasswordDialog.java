/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aescrypt;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Rahul Pal
 */
public class PasswordDialog extends javax.swing.JFrame {

    /**
     * Creates new form PasswordDialog
     */
    String inFilePath = null;
    String outFilePath = null;
    boolean deleteFile;
    String MODE = null;
    
    public PasswordDialog(String inPath,String outPath,boolean delete,String MODE) {
        initComponents();
        inFilePath = inPath;
        outFilePath = outPath;
        deleteFile = delete;
        this.MODE = MODE;
        
        if(MODE.equals("DECRYPT")){
            jLabel3.setVisible(false);
            jConfirmPasswordField.setVisible(false);
        }
        
        //System.out.println(inFilePath + " " + MODE + " " + outFilePath);
    }
    
    public boolean passwordCheck(String Pass) {

        int i, j, k, l;
        boolean passOK = false;
        boolean passNumChk = false;
        boolean passUppercaseChk = false;
        boolean passLowerChk = false;
        boolean passCharChk = false;
        String Password = Pass;
        if (Password.length() >= 8) {
            for (i = 0; i < Password.length(); i++) {
                boolean NumChk = false;
                boolean UpperCaseChk = false;
                boolean LowerCaseChk = false;

                //Number Check
                for (k = 48; k <= 57; k++) {
                    if (Password.charAt(i) == k) {
                        NumChk = true;
                        if(passNumChk == false)
                            passNumChk = true;
                        break;
                    }
                }

                //LowerCase Check
                for (j = 97; j <= 122; j++) {
                    if (Password.charAt(i) == j) {
                        LowerCaseChk = true;
                        if(passLowerChk == false)
                            passLowerChk = true;
                        break;
                    }
                }

                //UpperCase Check
                for (l = 65; l <= 90; l++) {
                    if (Password.charAt(i) == l) {
                        UpperCaseChk = true;
                        if(passUppercaseChk == false)
                            passUppercaseChk = true;
                        break;
                    }
                }

                //Char Check
                if (passCharChk == false) {
                    if(NumChk == false && UpperCaseChk == false && LowerCaseChk == false)
                        passCharChk = true;
                }

                if (passNumChk == true && passUppercaseChk == true && passLowerChk == true && passCharChk == true) {
                    passOK = true;
                    break;
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Password Must Be At Least 8 Characters Long");

        Password = null;
        return passOK;
    }

    private PasswordDialog() {
        //System.out.println("Basic Cons");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jConfirmPasswordField = new javax.swing.JPasswordField();
        buttonStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Enter Password to Proceed");

        jLabel2.setText("Password");

        jLabel3.setText("Confirm Password");

        buttonStart.setText("START");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonStart, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonStart)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        // TODO add your handling code here:
        String Password = jPasswordField.getText();
        String confirmPassword = jConfirmPasswordField.getText();
        
        if(Password.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter Password");
        }
        else if(!passwordCheck(Password)){
            JOptionPane.showMessageDialog(null, "Password should contain an uppercase,a lowercase,\na number and a special character.");
        }
        else{
     
            if(MODE.equals("ENCRYPT")){
                if(Password.equals(confirmPassword)){
                    try {
                        AESCryptor.encryptFile(inFilePath, outFilePath, Password.toCharArray(), deleteFile);
                        JOptionPane.showMessageDialog(null, "File Encrypted Successfully!");
                        this.dispose();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "File does not Exists!");
                        Logger.getLogger(PasswordDialog.class.getName()).log(Level.SEVERE, null, ex);
                        this.dispose();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Password did not match!");
                }
            }
            
            if(MODE.equals("DECRYPT")){
                try {
                    AESCryptor.decryptFile(outFilePath, inFilePath, Password.toCharArray());
                    JOptionPane.showMessageDialog(null, "File Decrypted Successfully!");
                    this.dispose();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "File Does Not Exists!");
                    Logger.getLogger(PasswordDialog.class.getName()).log(Level.SEVERE, null, ex);
                    this.dispose();
                }
            }
            
        }
        
    }//GEN-LAST:event_buttonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private javax.swing.JPasswordField jConfirmPasswordField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField;
    // End of variables declaration//GEN-END:variables
}
